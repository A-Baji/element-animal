{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "DataJoint Element - Animal \u00b6 element-animal features a DataJoint pipeline design for subject and genotyping management. element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-animal can be flexibly attached to any DataJoint workflow. See the Element Animal documentation for the background information and development timeline. For more information on the DataJoint Elements project, please visit https://elements.datajoint.org. This work is supported by the National Institutes of Health. Element architecture \u00b6 There are two modules in element-animal : + subject: contains the basic information of subject, including Strain, Line, Subject, Zygosity, and SubjectDeath information + genotyping: this module is designed for labs that keep track of colony management and genotyping results, containing information of breeding, weaning, housing, and genotyping. Subject Diagram \u00b6 Genotyping Diagram \u00b6", "title": "Element Animal"}, {"location": "#datajoint-element-animal", "text": "element-animal features a DataJoint pipeline design for subject and genotyping management. element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-animal can be flexibly attached to any DataJoint workflow. See the Element Animal documentation for the background information and development timeline. For more information on the DataJoint Elements project, please visit https://elements.datajoint.org. This work is supported by the National Institutes of Health.", "title": "DataJoint Element - Animal"}, {"location": "#element-architecture", "text": "There are two modules in element-animal : + subject: contains the basic information of subject, including Strain, Line, Subject, Zygosity, and SubjectDeath information + genotyping: this module is designed for labs that keep track of colony management and genotyping results, containing information of breeding, weaning, housing, and genotyping.", "title": "Element architecture"}, {"location": "#subject-diagram", "text": "", "title": "Subject Diagram"}, {"location": "#genotyping-diagram", "text": "", "title": "Genotyping Diagram"}, {"location": "citation/", "text": "If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Animal (version <Enter version number> )", "title": "Citation"}, {"location": "concepts/", "text": "Most pipeline begins with some information about the experiment animal subjects. This includes general information such as source, date of birth, sex, owner, and death information. In addition, many labs perform their own genotyping of the animal subjects while others rely on the animal care facility to perform it centrally. Most labs want to track the zygosity information of the animals. Those labs that perform their own genotyping need to keep track of additional information such as the breeding pairs, litters, weaning, caging, and genotyping tests. Over the past few years, several labs have developed DataJoint-based pipelines for animal management. Our team collaborated with several of them during their projects. Additionally, we interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: International Brain Laboratory https://github.com/int-brain-lab/IBL-pipeline BrainCoGs (Princeton Neuroscience Institute) https://github.com/BrainCOGS/U19-pipeline_python; https://github.com/BrainCOGS/U19-pipeline-matlab MoC3 (Columbia Zuckerman Institute) + Costa Lab (private repository) + Hillman Lab: https://github.com/ZuckermanBrain/datajoint-hillman Through our interviews and direct collaboration with the precursor projects, we identified the common motifs in the animal subject schemas to create the Animal Management Element. This element works for diverse downstream pipelines and is always used in combination with other elements for specific experiments. As such it is validated jointly with the processing elements such as the Array Ephys Element and Calcium Imaging Element.", "title": "Concepts"}, {"location": "tutorials/", "text": "Installation \u00b6 1 pip install element-animal If you already have an older version of element-animal installed using pip , upgrade with 1 pip install --upgrade element-animal Element usage \u00b6 element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies that can be flexibly attached to any DataJoint workflow. See the workflow-session repository for example usage of element-animal . Also refer to the workflow-calcium-imaging and workflow-array-ephys repositories for example usages of element-animal when combining with other elements.", "title": "Tutorials"}, {"location": "tutorials/#installation", "text": "1 pip install element-animal If you already have an older version of element-animal installed using pip , upgrade with 1 pip install --upgrade element-animal", "title": "Installation"}, {"location": "tutorials/#element-usage", "text": "element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies that can be flexibly attached to any DataJoint workflow. See the workflow-session repository for example usage of element-animal . Also refer to the workflow-calcium-imaging and workflow-array-ephys repositories for example usages of element-animal when combining with other elements.", "title": "Element usage"}, {"location": "about/changelog/", "text": "../../../CHANGELOG.md", "title": "Changelog"}, {"location": "api/element_animal/__init__/", "text": "", "title": "__init__.py"}, {"location": "api/element_animal/genotyping/", "text": "activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None ) \u00b6 activate(genotyping_schema_name, subject_schema_name=None, create_schema=True, create_tables=True, linking_module=None) :param genotyping_schema_name: schema name on the database server to activate the genotyping element :param subject_schema_name: schema name on the database server to activate the subject element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the genotyping element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal Source code in element_animal/genotyping.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None , ): \"\"\" activate(genotyping_schema_name, subject_schema_name=None, create_schema=True, create_tables=True, linking_module=None) :param genotyping_schema_name: schema name on the database server to activate the `genotyping` element :param subject_schema_name: schema name on the database server to activate the `subject` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the `genotyping` element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) subject . activate ( subject_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = linking_module , ) schema . activate ( genotyping_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "genotyping.py"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.activate", "text": "activate(genotyping_schema_name, subject_schema_name=None, create_schema=True, create_tables=True, linking_module=None) :param genotyping_schema_name: schema name on the database server to activate the genotyping element :param subject_schema_name: schema name on the database server to activate the subject element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the genotyping element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal Source code in element_animal/genotyping.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None , ): \"\"\" activate(genotyping_schema_name, subject_schema_name=None, create_schema=True, create_tables=True, linking_module=None) :param genotyping_schema_name: schema name on the database server to activate the `genotyping` element :param subject_schema_name: schema name on the database server to activate the `subject` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the `genotyping` element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) subject . activate ( subject_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = linking_module , ) schema . activate ( genotyping_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_animal/subject/", "text": "activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ) \u00b6 activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None) :param schema_name: schema name on the database server to activate the subject element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the subject element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal Source code in element_animal/subject.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ): \"\"\" activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None) :param schema_name: schema name on the database server to activate the `subject` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the `subject` element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "subject.py"}, {"location": "api/element_animal/subject/#element_animal.subject.activate", "text": "activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None) :param schema_name: schema name on the database server to activate the subject element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the subject element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal Source code in element_animal/subject.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ): \"\"\" activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None) :param schema_name: schema name on the database server to activate the `subject` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. :param linking_module: a module name or a module containing the required dependencies to activate the `subject` element: Upstream tables: + Source: the source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) + Lab: the lab for which a particular animal belongs to + Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) + User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_animal/version/", "text": "Package metadata.", "title": "version.py"}, {"location": "api/element_animal/export/__init__/", "text": "", "title": "__init__.py"}, {"location": "api/element_animal/export/nwb/", "text": "", "title": "nwb.py"}]}